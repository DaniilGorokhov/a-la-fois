services:
  message-proxy-1:
    container_name: messageProxy1
    depends_on:
      - kafka
      - doc-handler
    build:
      context: .
      args:
        - BUILD_CONTEXT=messageProxy
      target: messageProxy
    environment:
      - KAFKA_HOST=kafka:9092
    ports:
      - "3000:3000"
    networks:
      - store-network
      - kafka-network
  message-proxy-1-dapr:
    container_name: mp1-dapr
    image: "daprio/daprd:edge"
    depends_on:
      - message-proxy-1
      - placement
    command: [
      "./daprd",
      "--app-id", "docHandler",
      "--app-protocol", "http",
      "--app-port", "3000",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--components-path", "./components",
    ]
    volumes:
      - "./daprComponents/test/:/components"
    network_mode: "service:message-proxy-1"

  message-proxy-2:
    container_name: messageProxy2
    depends_on:
      - kafka
      - doc-handler
    build:
      context: .
      args:
        - BUILD_CONTEXT=messageProxy
      target: messageProxy
    environment:
      - KAFKA_HOST=kafka:9092
    ports:
      - "3001:3000"
    networks:
      - store-network
      - kafka-network
  message-proxy-2-dapr:
    container_name: mp2-dapr
    image: "daprio/daprd:edge"
    depends_on:
      - message-proxy-2
      - placement
    command: [
      "./daprd",
      "--app-id", "docHandler",
      "--app-protocol", "http",
      "--app-port", "3000",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--components-path", "./components",
    ]
    volumes:
      - "./daprComponents/test/:/components"
    network_mode: "service:message-proxy-2"

  redis:
    container_name: redis
    image: redis:7.0.2-alpine
    ports:
      - "6378:6379"
    networks:
      - store-network

  doc-handler:
    container_name: docHandler
    build:
      context: .
      args:
        - BUILD_CONTEXT=docHandler
      target: docHandler
    networks:
      - store-network
  doc-handler-dapr:
    container_name: docHandler-dapr
    image: "daprio/daprd:edge"
    depends_on:
      - doc-handler
      - redis
      - placement
    command: [
      "./daprd",
      "--app-id", "docHandler",
      "--app-protocol", "http",
      "--app-port", "3000",
      "--placement-host-address", "placement:50006", # Dapr's placement service can be reach via the docker DNS entry
      "--components-path", "./components",
    ]
    volumes:
      - "./daprComponents/test/:/components"
    network_mode: "service:doc-handler"

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - kafka-network

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    depends_on:
      - zookeeper
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - kafka-network

  placement:
    image: "daprio/dapr"
    command: [ "./placement", "--port", "50006" ]
    ports:
      - "50006:50006"
    networks:
      - store-network

networks:
  kafka-network:
  store-network:
